(defpackage :lecture-7
  (:use :cl)
  (:import-from :model :register :registry :new-module)
  (:export :main)
  (:documentation "Main package to be loaded."))

(in-package :lecture-7)

(defun main ()
  (format t "~&Welcome to the Student Directory:~%")
  (format t "(A)dd Student~%")
  (format t "(B)rowse all students~%")
  (format t "(C)all by student ID~%")
  (format t "(D)efine Modules~%")
  (format t "(E)nroll students to Modules~%")
  (format t "(Q)uit~%")
  (format t "Your input: ")
  (let ((in (read-line)))
    (cond ((string-equal "a" in)
	   (register)
	   (main))
	  ((string-equal "b" in)
	   (registry)
	   (main))
	  ((string-equal "c" in)
	   (format t "~&Student ID: ")
	   (let ((id (parse-integer (read-line))))
	     (registry id)
	     (main)))
	  ((string-equal "d" in)
	   (new-module)
	   (main))
	  ((string-equal "e" in)
	   (error "Not yet implemented"))
	  ((string-equal "q" in)
	   (format t "~&Goodbye"))
	  (t  (format t "~&Unknown input, kindly choose (a/b/c/d/e or q)?~%")
	      (main)))))
	  
(defun enroll-students ()
  "Enroll students to modules."
  (format t "~&Enroll by ID, Un-enrolled only, or cancel?~%(i/u/x): ")
  (let ((choice (read-line)))
    (cond ((char= #\i (char choice 0))
	   (error "Enroll by ID not yet implemented."))
	  ((char= #\u (char choice 0))
	   (error "Un-enrolled only not yet implemented."))
	  ((char= #\x (char choice 0))
	   (format t "~&Returning to main screen."))
	  (t  (format t "~&Unknown choice")
	      (enroll-students)))))
